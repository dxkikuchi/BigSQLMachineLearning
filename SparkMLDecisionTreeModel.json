{"paragraphs":[{"text":"%md\n# <font color=\"blue\">A Spark Machine Learning Model Using Decision Trees</font>\n\nThis notebook will retrieve training and test data that resides on HDFS which will be used to train and save a machine learning model.  This model will be used to predict a product line category that a customer may be interested in based on that customer's gender, age, marital status and profession.  This model can be called using IBM Db2 Big SQL to deliver predictions.  Please step through the notebook to see how this model is provided.  Or you can run all the cells to save the machine learning model that can be used with IBM Db2 Big SQL.<br>\n<img src=\"https://github.com/dxkikuchi/BigSQLMachineLearning/blob/master/spark.jpg?raw=true\"  width=\"600\"/>\nThis notebook is based on the great work by Xabriel J Collazo Mojica that can be found at https://github.ibm.com/xjcollaz/bigsql-ml-demo.","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1><font color=\"blue\">A Spark Machine Learning Model Using Decision Trees</font></h1>\n<p>This notebook will retrieve training and test data that resides on HDFS which will be used to train and save a machine learning model. This model will be used to predict a product line category that a customer may be interested in based on that customer&rsquo;s gender, age, marital status and profession. This model can be called using IBM Db2 Big SQL to deliver predictions. Please step through the notebook to see how this model is provided. Or you can run all the cells to save the machine learning model that can be used with IBM Db2 Big SQL.<br><br/><img src=\"https://github.com/dxkikuchi/BigSQLMachineLearning/blob/master/spark.jpg?raw=true\"  width=\"600\"/><br/>This notebook is based on the great work by Xabriel J Collazo Mojica that can be found at <a href=\"https://github.ibm.com/xjcollaz/bigsql-ml-demo\">https://github.ibm.com/xjcollaz/bigsql-ml-demo</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654376_-517243195","id":"20170822-133139_1112727478","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11240"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Retrieve training and test data from HDFS</h3><font color=\"blue\">\n  > <b>CODE CELL 1</b> - Reads data from HDFS.  Note that the <b>FIRST</b> Spark session command may take a few moments to initialize and execute.<br>\n  > <b>CODE CELL 2</b> - Displays the first 3 rows of training data along with the schema and row count.<br>\n  > <b>CODE CELL 3</b> - Displays the first 3 rows of test data along with the schema and row count.  Note the similarities and differences between the training and test data.\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Retrieve training and test data from HDFS</h3><font color=\"blue\">\n  > <b>CODE CELL 1</b> - Reads data from HDFS.  Note that the <b>FIRST</b> Spark session command may take a few moments to initialize and execute.<br>\n  > <b>CODE CELL 2</b> - Displays the first 3 rows of training data along with the schema and row count.<br>\n  > <b>CODE CELL 3</b> - Displays the first 3 rows of test data along with the schema and row count.  Note the similarities and differences between the training and test data.\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654377_-517627944","id":"20171215-005313_1173584884","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11241"},{"text":"%spark2 // CODE CELL 1 //\nval train = spark.read.option(\"inferSchema\", \"true\").option(\"header\",\"true\").csv(\"/user/admin/GoSales80/GoSales_Tx_80.csv\")\nval test  = spark.read.option(\"inferSchema\", \"true\").option(\"header\",\"true\").csv(\"/user/admin/GoSales20/GoSales_Tx_20.csv\")","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654377_-517627944","id":"20171214-143339_1055686769","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11242"},{"text":"%spark2 // CODE CELL 2 //\ntrain.show(3)\ntrain.printSchema\ntrain.count","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654377_-517627944","id":"20171214-143435_1865339839","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11243"},{"text":"%spark2 // CODE CELL 3 //\ntest.show(3)\ntest.printSchema\ntest.count","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654378_-516473697","id":"20171214-143510_837274732","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11244"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Gather some basic statistics about the training and test datasets</h3><font color=\"blue\">\n  > <b>CODE CELL 4</b> - Retrieve basic statistics such as count, mean, standard deviation, min and max when possible.  Note the similarities and differences of the training and test datasets.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Gather some basic statistics about the training and test datasets</h3><font color=\"blue\">\n  > <b>CODE CELL 4</b> - Retrieve basic statistics such as count, mean, standard deviation, min and max when possible.  Note the similarities and differences of the training and test datasets.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654378_-516473697","id":"20171215-005201_1826015654","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11245"},{"text":"%spark2 // CODE CELL 4 //\ntrain.describe().show() \ntest.describe().show()","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654378_-516473697","id":"20171214-143733_1009565757","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11246"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Group training data and create table for SQL processing</h3><font color=\"blue\">\n  > <b>CODE CELL 5</b> - Training data grouped by 'product_line' with counts.  Note grouping by 'age', 'marital_status' and 'profession' can also be derived.  Lastly, a table is defined for SQL processing on the training data.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Group training data and create table for SQL processing</h3><font color=\"blue\">\n  > <b>CODE CELL 5</b> - Training data grouped by 'product_line' with counts.  Note grouping by 'age', 'marital_status' and 'profession' can also be derived.  Lastly, a table is defined for SQL processing on the training data.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654378_-516473697","id":"20171215-012002_337770473","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11247"},{"text":"%spark2 // CODE CELL 5 //\ntrain.groupBy(\"product_line\").count().show\ntrain.createOrReplaceTempView(\"product\")","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654379_-516858446","id":"20171214-144000_836715313","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11248"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Use SQL on the training data</h3><font color=\"blue\">\n  > <b>CODE CELL 6</b> - SQL processing can be applied to the training data for analysis. Note that you can select other visualizations using charts. <br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Use SQL on the training data</h3><font color=\"blue\">\n  > <b>CODE CELL 6</b> - SQL processing can be applied to the training data for analysis. Note that you can select other visualizations using charts. <br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654379_-516858446","id":"20171215-012531_1962179078","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11249"},{"text":"%spark2.sql \nSELECT marital_status, sum(1), avg(age), stddev(age) FROM product GROUP BY marital_status","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654379_-516858446","id":"20171214-144001_1707748313","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11250"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Import Spark Machine Learning libraries</h3><font color=\"blue\">\n  > <b>CODE CELL 7</b> - The required machine learning libraries for this scenario are imported.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Import Spark Machine Learning libraries</h3><font color=\"blue\">\n  > <b>CODE CELL 7</b> - The required machine learning libraries for this scenario are imported.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654379_-516858446","id":"20171215-013338_156135640","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11251"},{"text":"%spark2 // CODE CELL 7 //\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString, VectorIndexer, VectorAssembler}\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\nimport org.apache.spark.ml.{Pipeline, PipelineModel, Model}\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator, CrossValidatorModel}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654379_-516858446","id":"20171214-153306_1955301276","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11252"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Prepare strings with StringIndexer and create vector with VectorAssembler</h3><font color=\"blue\">\n  > <b>CODE CELL 8</b> - Set up StringIndexer() to transform strings into indexes in order for machine learning to process them.  Note that 'PRODUCT_LINE' is the column to be predicted.<br>\n  > <b>CODE CELL 9</b> - Create a vector of features using VectorAssembler which is the expected input format for machine learning.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Prepare strings with StringIndexer and create vector with VectorAssembler</h3><font color=\"blue\">\n  > <b>CODE CELL 8</b> - Set up StringIndexer() to transform strings into indexes in order for machine learning to process them.  Note that 'PRODUCT_LINE' is the column to be predicted.<br>\n  > <b>CODE CELL 9</b> - Create a vector of features using VectorAssembler which is the expected input format for machine learning.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654380_-518782190","id":"20171215-014141_488225415","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11253"},{"text":"%spark2 // CODE CELL 8 //\nval stringIndexer_label = new StringIndexer().setInputCol(\"PRODUCT_LINE\").setOutputCol(\"label\").fit(train)\nval stringIndexer_gend = new StringIndexer().setInputCol(\"GENDER\").setOutputCol(\"GENDER_IX\")\nval stringIndexer_mar = new StringIndexer().setInputCol(\"MARITAL_STATUS\").setOutputCol(\"MARITAL_STATUS_IX\")\nval stringIndexer_prof = new StringIndexer().setInputCol(\"PROFESSION\").setOutputCol(\"PROFESSION_IX\")","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654380_-518782190","id":"20170822-104156_932235308","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11254"},{"text":"%spark2 // CODE CELL 9 //\nval featureCols = Array(\"GENDER_IX\", \"AGE\", \"MARITAL_STATUS_IX\", \"PROFESSION_IX\")\nval vectorAssembler_features = new VectorAssembler().setInputCols(featureCols).setOutputCol(\"features\")","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654380_-518782190","id":"20170822-104336_407486744","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11255"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Set up a decision tree classifier and revert index labels back to original labels</h3><font color=\"blue\">\n  > <b>CODE CELL 10</b> - Create a decision tree classifier using DecisionTreeClassifier.<br>\n  > <b>CODE CELL 11</b> - Convert indexed labels back to orginial lables to see product line prediction by name.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Set up a decision tree classifier and revert index labels back to original labels</h3><font color=\"blue\">\n  > <b>CODE CELL 10</b> - Create a decision tree classifier using DecisionTreeClassifier.<br>\n  > <b>CODE CELL 11</b> - Convert indexed labels back to orginial lables to see product line prediction by name.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654380_-518782190","id":"20171215-014757_1230442435","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11256"},{"text":"%spark2 // CODE CELL 10 //\nval dt = new DecisionTreeClassifier().setLabelCol(\"label\").setFeaturesCol(\"features\")","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654380_-518782190","id":"20170822-104411_1492740994","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11257"},{"text":"%spark2 // CODE CELL 11 //\nval label_converter = new IndexToString().setInputCol(\"prediction\").setOutputCol(\"predictedLabel\").setLabels(stringIndexer_label.labels)","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654381_-519166939","id":"20171214-155605_1212016419","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11258"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Set up a machine learning pipeline</h3><font color=\"blue\">\n  > <b>CODE CELL 12</b> - Chains the previous steps into an ordered pipeline of string indexers, vector assembler, decision tree classifier and reverting back to strings.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Set up a machine learning pipeline</h3><font color=\"blue\">\n  > <b>CODE CELL 12</b> - Chains the previous steps into an ordered pipeline of string indexers, vector assembler, decision tree classifier and reverting back to strings.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654381_-519166939","id":"20171215-123752_1126507972","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11259"},{"text":"%spark2 // CODE CELL 12 //\nval pipeline = new Pipeline().setStages(Array(stringIndexer_label, stringIndexer_prof, stringIndexer_gend, stringIndexer_mar, vectorAssembler_features, dt, label_converter))","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654381_-519166939","id":"20171214-155625_1874944529","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11260"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Use cross validation to optimize hyperparameters in pipline</h3><font color=\"blue\">\n  > <b>CODE CELL 13</b> - ParamGridBuilder used to construct a grid of maximum tree depths to realize the best model.<br>\n  > <b>CODE CELL 14</b> - Pipeline is now treated as an estimator being wrapped up in a 3-fold cross validator and the model is trained.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Use cross validation to optimize hyperparameters in pipline</h3><font color=\"blue\">\n  > <b>CODE CELL 13</b> - ParamGridBuilder used to construct a grid of maximum tree depths to realize the best model.<br>\n  > <b>CODE CELL 14</b> - Pipeline is now treated as an estimator being wrapped up in a 3-fold cross validator and the model is trained.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654381_-519166939","id":"20171215-124338_778829831","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11261"},{"text":"%spark2 // CODE CELL 13 //\nval paramGrid = new ParamGridBuilder().addGrid(dt.maxDepth,Array(3,6,9)).build()","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654382_-518012692","id":"20170822-104543_940487409","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11262"},{"text":"%spark2 // CODE CELL 14 //\nval evaluator = new MulticlassClassificationEvaluator().setLabelCol(\"label\").setPredictionCol(\"prediction\")\nval crossval = new CrossValidator().setEstimator(pipeline).setEvaluator(evaluator).setEstimatorParamMaps(paramGrid).setNumFolds(3)\nval cvModel = crossval.fit(train)","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654382_-518012692","id":"20170822-104840_1969000046","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11263"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Use model with test data</h3><font color=\"blue\">\n  > <b>CODE CELL 15</b> - Generate predictions using the trained model with test data and determine its accuracy.<br>\n  > <b>CODE CELL 16</b> - Show the prediction and probability for a single tuple.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Use model with test data</h3><font color=\"blue\">\n  > <b>CODE CELL 15</b> - Generate predictions using the trained model with test data and determine its accuracy.<br>\n  > <b>CODE CELL 16</b> - Show the prediction and probability for a single tuple.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654382_-518012692","id":"20171215-125447_420151774","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11264"},{"text":"%spark2 // CODE CELL 15 //\nval predictions = cvModel.transform(test)\npredictions.show\nval accuracy = evaluator.evaluate(predictions)","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654382_-518012692","id":"20170822-104933_1232658630","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11265"},{"text":"%spark2 // CODE CELL 16 //\nval one_tuple = test.limit(1).drop(\"product_line\")\none_tuple.show\nval one_prediction = cvModel.transform(one_tuple)\none_prediction.select(\"predictedLabel\", \"probability\").show","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654382_-518012692","id":"20170822-120128_478486041","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11266"},{"text":"%md\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Save, restore and retest model</h3><font color=\"blue\">\n  > <b>CODE CELL 17</b> - Save the model to HDFS.<br>\n  > <b>CODE CELL 18</b> - Restore the model from HDFS.<br>\n  > <b>CODE CELL 19</b> - Rerun predictions and accuracy using test data again.  Note the similarities between the two.<br>\n</font></div>","dateUpdated":"2017-12-15T13:04:14-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<div style=\"background-color: #e7f2fa; color: #333\">\n  <h3 style=\"background-color: #6ab0de\">Save, restore and retest model</h3><font color=\"blue\">\n  > <b>CODE CELL 17</b> - Save the model to HDFS.<br>\n  > <b>CODE CELL 18</b> - Restore the model from HDFS.<br>\n  > <b>CODE CELL 19</b> - Rerun predictions and accuracy using test data again.  Note the similarities between the two.<br>\n</font></div>\n</div>"}]},"apps":[],"jobName":"paragraph_1513364654383_-518397441","id":"20171215-125829_400721606","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11267"},{"text":"%spark2 // CODE CELL 17 //\ncvModel.write.overwrite().save(\"CrossValidatedDecisionTree.sparkmodel\")","dateUpdated":"2017-12-15T13:07:26-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1513364654383_-518397441","id":"20170823-115258_541938119","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11268"},{"text":"%spark2 // CODE CELL 18 //\nval restoredCVModel = CrossValidatorModel.load(\"CrossValidatedDecisionTree.sparkmodel\")","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654383_-518397441","id":"20171215-000023_1639312082","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11269"},{"text":"%spark2 // CODE CELL 19 //\nrestoredCVModel.transform(test).show\nval accuracy = evaluator.evaluate(predictions)","dateUpdated":"2017-12-15T13:04:14-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513364654383_-518397441","id":"20170824-121033_1624550233","dateCreated":"2017-12-15T13:04:14-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11270"}],"name":"SparkMLDecisionTreeModel","id":"2D447T1NB","angularObjects":{"2CHS8UYQQ:shared_process":[],"2CKX6DGQZ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2CKX8WPU1:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}